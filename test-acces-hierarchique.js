// Test de l'acc√®s hi√©rarchique aux titres fonciers
const { PrismaClient } = require("@prisma/client");
const axios = require("axios");

const prisma = new PrismaClient();
const baseUrl = "http://localhost:3000";

// Fonction utilitaire pour faire des requ√™tes API
async function apiRequest(method, endpoint, data = null, token = null) {
  const config = {
    method,
    url: `${baseUrl}${endpoint}`,
    headers: { "Content-Type": "application/json" },
  };

  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }

  if (data) {
    config.data = data;
  }

  try {
    const response = await axios(config);
    return { success: true, data: response.data };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data?.error || error.message,
    };
  }
}

async function testAccesHierarchique() {
  console.log("üîê TEST D'ACC√àS HI√âRARCHIQUE AUX TITRES FONCIERS");
  console.log("==================================================");

  try {
    // 1. Cr√©er la structure g√©ographique de test
    console.log("\n1Ô∏è‚É£  Cr√©ation de la structure g√©ographique...");

    // S'assurer que les tables g√©ographiques existent
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS regions (
        id SERIAL PRIMARY KEY,
        nom VARCHAR(100) NOT NULL UNIQUE,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `;

    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS departements (
        id SERIAL PRIMARY KEY,
        nom VARCHAR(100) NOT NULL,
        region_id INTEGER REFERENCES regions(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT NOW(),
        UNIQUE(nom, region_id)
      )
    `;

    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS arrondissements (
        id SERIAL PRIMARY KEY,
        nom VARCHAR(100) NOT NULL,
        departement_id INTEGER REFERENCES departements(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT NOW(),
        UNIQUE(nom, departement_id)
      )
    `;

    // Ins√©rer des donn√©es g√©ographiques de test
    await prisma.$executeRaw`
      INSERT INTO regions (nom) VALUES ('Centre')
      ON CONFLICT (nom) DO NOTHING
    `;

    await prisma.$executeRaw`
      INSERT INTO departements (nom, region_id) 
      SELECT 'Mfoundi', r.id FROM regions r WHERE r.nom = 'Centre'
      ON CONFLICT (nom, region_id) DO NOTHING
    `;

    await prisma.$executeRaw`
      INSERT INTO arrondissements (nom, departement_id) 
      SELECT 'Yaound√© 1er', d.id FROM departements d WHERE d.nom = 'Mfoundi'
      ON CONFLICT (nom, departement_id) DO NOTHING
    `;

    await prisma.$executeRaw`
      INSERT INTO arrondissements (nom, departement_id) 
      SELECT 'Yaound√© 2√®me', d.id FROM departements d WHERE d.nom = 'Mfoundi'
      ON CONFLICT (nom, departement_id) DO NOTHING
    `;

    await prisma.$executeRaw`
      INSERT INTO arrondissements (nom, departement_id) 
      SELECT 'Yaound√© 3√®me', d.id FROM departements d WHERE d.nom = 'Mfoundi'
      ON CONFLICT (nom, departement_id) DO NOTHING
    `;

    console.log(
      "‚úÖ Structure g√©ographique cr√©√©e (Centre > Mfoundi > Yaound√© 1er, 2√®me, 3√®me)"
    );

    // 2. Cr√©er des localit√©s correspondantes
    console.log("\n2Ô∏è‚É£  Cr√©ation des localit√©s...");

    // Localit√© pour le d√©partement
    await prisma.localites.upsert({
      where: { type_valeur: { type: "departement", valeur: "Mfoundi" } },
      update: {},
      create: { type: "departement", valeur: "Mfoundi" },
    });

    // Localit√©s pour les arrondissements
    await prisma.localites.upsert({
      where: { type_valeur: { type: "arrondissement", valeur: "Yaound√© 1er" } },
      update: {},
      create: { type: "arrondissement", valeur: "Yaound√© 1er" },
    });

    await prisma.localites.upsert({
      where: {
        type_valeur: { type: "arrondissement", valeur: "Yaound√© 2√®me" },
      },
      update: {},
      create: { type: "arrondissement", valeur: "Yaound√© 2√®me" },
    });

    await prisma.localites.upsert({
      where: {
        type_valeur: { type: "arrondissement", valeur: "Yaound√© 3√®me" },
      },
      update: {},
      create: { type: "arrondissement", valeur: "Yaound√© 3√®me" },
    });

    console.log("‚úÖ Localit√©s cr√©√©es");

    // 3. Cr√©er des utilisateurs de test
    console.log("\n3Ô∏è‚É£  Cr√©ation des utilisateurs de test...");

    const localiteMfoundi = await prisma.localites.findFirst({
      where: { type: "departement", valeur: "Mfoundi" },
    });

    const localiteYde1 = await prisma.localites.findFirst({
      where: { type: "arrondissement", valeur: "Yaound√© 1er" },
    });

    const localiteYde2 = await prisma.localites.findFirst({
      where: { type: "arrondissement", valeur: "Yaound√© 2√®me" },
    });

    if (!localiteMfoundi || !localiteYde1 || !localiteYde2) {
      throw new Error("Les localit√©s n'ont pas √©t√© cr√©√©es correctement");
    }

    // Utilisateur niveau d√©partement (peut voir tous les arrondissements de son d√©partement)
    let userDept = await prisma.utilisateurs.findUnique({
      where: { email: "chef.mfoundi@test.cm" },
    });

    if (!userDept) {
      userDept = await prisma.utilisateurs.create({
        data: {
          nom: "Mbarga",
          prenom: "Jean",
          email: "chef.mfoundi@test.cm",
          mot_de_passe: "$2b$10$YourHashedPassword", // Mot de passe hash√©
          niveau_hierarchique: 2, // Niveau d√©partement
          localite_id: localiteMfoundi.id,
        },
      });
    }

    // Utilisateur niveau arrondissement 1
    let userArr1 = await prisma.utilisateurs.findUnique({
      where: { email: "chef.yde1@test.cm" },
    });

    if (!userArr1) {
      userArr1 = await prisma.utilisateurs.create({
        data: {
          nom: "Nkomo",
          prenom: "Marie",
          email: "chef.yde1@test.cm",
          mot_de_passe: "$2b$10$YourHashedPassword",
          niveau_hierarchique: 1, // Niveau arrondissement
          localite_id: localiteYde1.id,
        },
      });
    }

    // Utilisateur niveau arrondissement 2
    let userArr2 = await prisma.utilisateurs.findUnique({
      where: { email: "chef.yde2@test.cm" },
    });

    if (!userArr2) {
      userArr2 = await prisma.utilisateurs.create({
        data: {
          nom: "Fotso",
          prenom: "Paul",
          email: "chef.yde2@test.cm",
          mot_de_passe: "$2b$10$YourHashedPassword",
          niveau_hierarchique: 1, // Niveau arrondissement
          localite_id: localiteYde2.id,
        },
      });
    }

    console.log("‚úÖ Utilisateurs cr√©√©s:");
    console.log(
      `   ‚Ä¢ Chef de d√©partement: ${userDept.prenom} ${userDept.nom} (Mfoundi)`
    );
    console.log(
      `   ‚Ä¢ Chef d'arrondissement 1: ${userArr1.prenom} ${userArr1.nom} (Yaound√© 1er)`
    );
    console.log(
      `   ‚Ä¢ Chef d'arrondissement 2: ${userArr2.prenom} ${userArr2.nom} (Yaound√© 2√®me)`
    );

    // 4. Cr√©er des titres fonciers de test
    console.log("\n4Ô∏è‚É£  Cr√©ation des titres fonciers de test...");

    // Projet de test - d'abord chercher s'il existe, sinon le cr√©er
    let projet = await prisma.projets.findFirst({
      where: { nom: "Test Hi√©rarchie G√©ographique" },
    });

    if (!projet) {
      projet = await prisma.projets.create({
        data: {
          nom: "Test Hi√©rarchie G√©ographique",
          description: "Projet de test pour l'acc√®s hi√©rarchique",
          localite_id: localiteMfoundi.id,
        },
      });
    }

    // Titres fonciers dans diff√©rents arrondissements
    const titre1 = await prisma.titres_fonciers.create({
      data: {
        projet_id: projet.id,
        proprietaire: "Dupont Jean (Yaound√© 1er)",
        superficie: 1000.5,
        perimetre: 150.25,
        coordonnees_gps: [
          [
            [11.5, 3.8],
            [11.6, 3.8],
            [11.6, 3.9],
            [11.5, 3.9],
            [11.5, 3.8],
          ],
        ],
        localite: "Yaound√© 1er",
      },
    });

    const titre2 = await prisma.titres_fonciers.create({
      data: {
        projet_id: projet.id,
        proprietaire: "Martin Paul (Yaound√© 2√®me)",
        superficie: 2000.75,
        perimetre: 200.5,
        coordonnees_gps: [
          [
            [11.4, 3.7],
            [11.5, 3.7],
            [11.5, 3.8],
            [11.4, 3.8],
            [11.4, 3.7],
          ],
        ],
        localite: "Yaound√© 2√®me",
      },
    });

    const titre3 = await prisma.titres_fonciers.create({
      data: {
        projet_id: projet.id,
        proprietaire: "Nguema Marie (Yaound√© 3√®me)",
        superficie: 1500.25,
        perimetre: 175.75,
        coordonnees_gps: [
          [
            [11.3, 3.6],
            [11.4, 3.6],
            [11.4, 3.7],
            [11.3, 3.7],
            [11.3, 3.6],
          ],
        ],
        localite: "Yaound√© 3√®me",
      },
    });

    console.log("‚úÖ Titres fonciers cr√©√©s:");
    console.log(
      `   ‚Ä¢ Titre 1: ${titre1.proprietaire} (${titre1.superficie}m¬≤)`
    );
    console.log(
      `   ‚Ä¢ Titre 2: ${titre2.proprietaire} (${titre2.superficie}m¬≤)`
    );
    console.log(
      `   ‚Ä¢ Titre 3: ${titre3.proprietaire} (${titre3.superficie}m¬≤)`
    );

    // 5. Tester l'acc√®s aux titres fonciers
    console.log("\n5Ô∏è‚É£  Test d'acc√®s aux titres fonciers...");

    // Test 1: Connexion de l'utilisateur d√©partement (devrait voir tous les titres)
    console.log("\nüìç Test: Acc√®s utilisateur niveau d√©partement");
    console.log(
      "   ‚Üí Devrait voir TOUS les titres des arrondissements de Mfoundi"
    );

    // Note: Pour ce test, nous simulons l'utilisateur connect√©
    // En pratique, il faudrait d'abord faire la connexion pour obtenir le token
    const titresDept = await prisma.$queryRaw`
      SELECT tf.* FROM titres_fonciers tf
      WHERE tf.localite IN (
        SELECT a.nom 
        FROM arrondissements a
        JOIN departements d ON a.departement_id = d.id
        WHERE d.nom = 'Mfoundi'
      )
      OR tf.localite = 'Mfoundi'
    `;

    console.log(
      `‚úÖ Utilisateur d√©partement peut voir ${
        Array.isArray(titresDept) ? titresDept.length : 0
      } titres:`
    );
    if (Array.isArray(titresDept)) {
      titresDept.forEach((titre, index) => {
        console.log(
          `   ${index + 1}. ${titre.proprietaire} - ${titre.localite}`
        );
      });
    }

    // Test 2: Acc√®s utilisateur arrondissement (devrait voir seulement son arrondissement)
    console.log(
      "\nüìç Test: Acc√®s utilisateur niveau arrondissement (Yaound√© 1er)"
    );
    console.log("   ‚Üí Devrait voir SEULEMENT les titres de Yaound√© 1er");

    const titresArr1 = await prisma.$queryRaw`
      SELECT * FROM titres_fonciers 
      WHERE localite = 'Yaound√© 1er'
    `;

    console.log(
      `‚úÖ Utilisateur arrondissement peut voir ${
        Array.isArray(titresArr1) ? titresArr1.length : 0
      } titres:`
    );
    if (Array.isArray(titresArr1)) {
      titresArr1.forEach((titre, index) => {
        console.log(
          `   ${index + 1}. ${titre.proprietaire} - ${titre.localite}`
        );
      });
    }

    // Test 3: Validation du contr√¥le d'acc√®s hi√©rarchique
    console.log("\nüìç Test: Validation de la logique hi√©rarchique");

    const allTitres = await prisma.titres_fonciers.findMany({
      where: {
        localite: {
          in: ["Yaound√© 1er", "Yaound√© 2√®me", "Yaound√© 3√®me", "Mfoundi"],
        },
      },
    });

    console.log(`‚úÖ Total titres cr√©√©s: ${allTitres.length}`);
    console.log(
      `‚úÖ Titres visibles par chef d√©partement: ${
        Array.isArray(titresDept) ? titresDept.length : 0
      }`
    );
    console.log(
      `‚úÖ Titres visibles par chef arrondissement: ${
        Array.isArray(titresArr1) ? titresArr1.length : 0
      }`
    );

    const expected = allTitres.length;
    const deptAccess = Array.isArray(titresDept) ? titresDept.length : 0;
    const arrAccess = Array.isArray(titresArr1) ? titresArr1.length : 0;

    if (deptAccess === expected) {
      console.log(
        "‚úÖ SUCC√àS: Le chef de d√©partement peut voir tous les titres"
      );
    } else {
      console.log(
        `‚ùå √âCHEC: Le chef de d√©partement devrait voir ${expected} titres, mais en voit ${deptAccess}`
      );
    }

    if (arrAccess === 1) {
      console.log("‚úÖ SUCC√àS: Le chef d'arrondissement ne voit que ses titres");
    } else {
      console.log(
        `‚ùå √âCHEC: Le chef d'arrondissement devrait voir 1 titre, mais en voit ${arrAccess}`
      );
    }

    // 6. Test des APIs avec authentification (simulation)
    console.log("\n6Ô∏è‚É£  Test simulation API avec diff√©rents niveaux...");

    // Simulation de la requ√™te pour chaque niveau
    const simulations = [
      {
        niveau: 1,
        localite: "Yaound√© 1er",
        nom: "Chef arrondissement",
        attendu: 1,
      },
      {
        niveau: 2,
        localite: "Mfoundi",
        nom: "Chef d√©partement",
        attendu: 3,
      },
      {
        niveau: 4,
        localite: null,
        nom: "Administrateur central",
        attendu: "tous",
      },
    ];

    for (const sim of simulations) {
      console.log(`\nüìä Simulation ${sim.nom} (niveau ${sim.niveau}):`);

      let query = "";
      let params = [];

      if (sim.niveau === 1) {
        query = `SELECT * FROM titres_fonciers WHERE localite = $1`;
        params = [sim.localite];
      } else if (sim.niveau === 2) {
        query = `
          SELECT tf.* FROM titres_fonciers tf
          WHERE tf.localite IN (
            SELECT a.nom 
            FROM arrondissements a
            JOIN departements d ON a.departement_id = d.id
            WHERE d.nom = $1
          )
          OR tf.localite = $1
        `;
        params = [sim.localite];
      } else {
        query = `SELECT * FROM titres_fonciers`;
        params = [];
      }

      const resultats = await prisma.$queryRawUnsafe(query, ...params);
      const resultatsArray = Array.isArray(resultats) ? resultats : [];
      console.log(
        `   ‚Üí Peut acc√©der √† ${resultatsArray.length} titres fonciers`
      );

      if (sim.attendu !== "tous" && resultatsArray.length === sim.attendu) {
        console.log(`   ‚úÖ R√©sultat correct (attendu: ${sim.attendu})`);
      } else if (sim.attendu === "tous") {
        console.log(`   ‚úÖ Acc√®s complet (administrateur)`);
      } else {
        console.log(
          `   ‚ùå R√©sultat incorrect (attendu: ${sim.attendu}, obtenu: ${resultatsArray.length})`
        );
      }
    }

    console.log("\nüéâ TESTS D'ACC√àS HI√âRARCHIQUE TERMIN√âS !");
    console.log("=======================================");

    console.log("‚úÖ FONCTIONNALIT√âS TEST√âES:");
    console.log(
      "‚Ä¢ Structure g√©ographique hi√©rarchique (R√©gion ‚Üí D√©partement ‚Üí Arrondissement)"
    );
    console.log("‚Ä¢ Utilisateurs avec diff√©rents niveaux d'acc√®s g√©ographique");
    console.log("‚Ä¢ Titres fonciers distribu√©s dans diff√©rents arrondissements");
    console.log("‚Ä¢ Logique d'acc√®s hi√©rarchique aux titres fonciers");
    console.log(
      "‚Ä¢ Validation que les chefs de d√©partement voient tous les arrondissements"
    );
    console.log(
      "‚Ä¢ Validation que les chefs d'arrondissement ne voient que leur zone"
    );

    console.log("\nüí° R√âSUM√â:");
    console.log(
      "‚Ä¢ Un utilisateur de niveau D√âPARTEMENT peut maintenant acc√©der √†"
    );
    console.log(
      "  tous les titres fonciers des arrondissements de son d√©partement"
    );
    console.log(
      "‚Ä¢ Un utilisateur de niveau ARRONDISSEMENT ne voit que son arrondissement"
    );
    console.log(
      "‚Ä¢ Un utilisateur de niveau R√âGION voit tous les d√©partements de sa r√©gion"
    );
    console.log("‚Ä¢ Un administrateur CENTRAL voit tout");
  } catch (error) {
    console.error("‚ùå Erreur durant les tests d'acc√®s hi√©rarchique:", error);
    console.error("Stack:", error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

// Lancer les tests
testAccesHierarchique();
