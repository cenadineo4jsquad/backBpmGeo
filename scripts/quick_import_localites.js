// Script d'importation rapide des localit√©s depuis les GeoJSON
const { PrismaClient } = require("@prisma/client");
const fs = require("fs");

const prisma = new PrismaClient();

async function quickImportLocalites() {
  console.log("üöÄ IMPORTATION RAPIDE DES LOCALIT√âS");
  console.log("===================================");

  try {
    // Lire le fichier des arrondissements
    console.log("üìÇ Lecture du fichier Arrondissements.geojson...");
    const arrondissementsData = JSON.parse(
      fs.readFileSync("./Arrondissements.geojson", "utf8")
    );

    // Extraire les donn√©es uniques
    const localitesMap = new Map();

    console.log("üîç Extraction des localit√©s...");
    let featuresProcessed = 0;

    arrondissementsData.features.forEach((feature) => {
      const props = feature.properties;

      if (props.NAME_1 && props.NAME_2 && props.NAME_3) {
        const region = props.NAME_1.trim();
        const departement = props.NAME_2.trim();
        const arrondissement = props.NAME_3.trim();

        // Ajouter r√©gion
        if (!localitesMap.has(`region:${region}`)) {
          localitesMap.set(`region:${region}`, {
            type: "region",
            valeur: region,
            parent: null,
          });
        }

        // Ajouter d√©partement
        const deptKey = `departement:${departement}:${region}`;
        if (!localitesMap.has(deptKey)) {
          localitesMap.set(deptKey, {
            type: "departement",
            valeur: departement,
            parent: region,
          });
        }

        // Ajouter arrondissement
        const arrKey = `arrondissement:${arrondissement}:${departement}:${region}`;
        if (!localitesMap.has(arrKey)) {
          localitesMap.set(arrKey, {
            type: "arrondissement",
            valeur: arrondissement,
            parent: departement,
            grandParent: region,
          });
        }

        featuresProcessed++;
      }
    });

    console.log(`‚úÖ ${featuresProcessed} features trait√©es`);
    console.log(`üìä ${localitesMap.size} localit√©s uniques extraites`);

    // Compter par type
    const stats = { region: 0, departement: 0, arrondissement: 0 };
    localitesMap.forEach((localite) => stats[localite.type]++);
    console.log(`   ‚Ä¢ R√©gions: ${stats.region}`);
    console.log(`   ‚Ä¢ D√©partements: ${stats.departement}`);
    console.log(`   ‚Ä¢ Arrondissements: ${stats.arrondissement}`);

    // Importer dans la base de donn√©es
    console.log("\nüíæ Importation en base de donn√©es...");

    let imported = 0;
    let errors = 0;

    for (const [key, localite] of localitesMap) {
      try {
        await prisma.localites.upsert({
          where: {
            type_valeur: {
              type: localite.type,
              valeur: localite.valeur,
            },
          },
          update: {}, // Ne rien mettre √† jour si existe d√©j√†
          create: {
            type: localite.type,
            valeur: localite.valeur,
          },
        });
        imported++;

        if (imported % 100 === 0) {
          console.log(`   üìä ${imported} localit√©s import√©es...`);
        }
      } catch (error) {
        errors++;
        if (errors <= 5) {
          // Afficher seulement les 5 premi√®res erreurs
          console.warn(
            `   ‚ö†Ô∏è  Erreur pour "${localite.valeur}":`,
            error.message
          );
        }
      }
    }

    console.log(`\n‚úÖ Importation termin√©e:`);
    console.log(`   ‚Ä¢ ${imported} localit√©s import√©es`);
    console.log(`   ‚Ä¢ ${errors} erreurs`);

    // Afficher un √©chantillon des donn√©es import√©es
    console.log("\nüìã √âCHANTILLON DES DONN√âES IMPORT√âES:");

    const regions = await prisma.localites.findMany({
      where: { type: "region" },
      take: 5,
      orderBy: { valeur: "asc" },
    });

    console.log("\nüèõÔ∏è  R√©gions (√©chantillon):");
    regions.forEach((r) => console.log(`   ‚Ä¢ ${r.valeur}`));

    const departements = await prisma.localites.findMany({
      where: { type: "departement" },
      take: 5,
      orderBy: { valeur: "asc" },
    });

    console.log("\nüè¢ D√©partements (√©chantillon):");
    departements.forEach((d) => console.log(`   ‚Ä¢ ${d.valeur}`));

    const arrondissements = await prisma.localites.findMany({
      where: { type: "arrondissement" },
      take: 5,
      orderBy: { valeur: "asc" },
    });

    console.log("\nüèòÔ∏è  Arrondissements (√©chantillon):");
    arrondissements.forEach((a) => console.log(`   ‚Ä¢ ${a.valeur}`));

    // Statistiques finales
    const finalStats = await Promise.all([
      prisma.localites.count({ where: { type: "region" } }),
      prisma.localites.count({ where: { type: "departement" } }),
      prisma.localites.count({ where: { type: "arrondissement" } }),
    ]);

    console.log("\nüìä STATISTIQUES FINALES:");
    console.log(`   ‚Ä¢ R√©gions en base: ${finalStats[0]}`);
    console.log(`   ‚Ä¢ D√©partements en base: ${finalStats[1]}`);
    console.log(`   ‚Ä¢ Arrondissements en base: ${finalStats[2]}`);
    console.log(`   ‚Ä¢ Total: ${finalStats[0] + finalStats[1] + finalStats[2]}`);
  } catch (error) {
    console.error("‚ùå Erreur lors de l'importation:", error);
    console.error("Stack:", error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

// Lancer l'importation
quickImportLocalites();
