/**
 * Test pour lister les extractions d√©j√† faites
 */

const axios = require("axios");

async function listExtractions() {
  console.log("üìã LISTE DES EXTRACTIONS D√âJ√Ä FAITES");
  console.log("=".repeat(50));

  try {
    // 1. Connexion
    console.log("üîê 1. Connexion...");
    const loginResponse = await axios.post("http://localhost:3000/api/login", {
      email: "reception.foncier@workflow.cm",
      mot_de_passe: "reception2025",
    });

    const token = loginResponse.data.access_token;
    console.log("‚úÖ Connect√©");

    // 2. R√©cup√©ration de toutes les extractions
    console.log("\nüìã 2. R√©cup√©ration de toutes les extractions...");
    const allExtractionsResponse = await axios.get(
      "http://localhost:3000/api/extractions",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    console.log(
      `‚úÖ ${allExtractionsResponse.data.length} extractions trouv√©es`
    );

    if (allExtractionsResponse.data.length > 0) {
      console.log("\nüìä R√©sum√© des extractions:");
      allExtractionsResponse.data.forEach((extraction, index) => {
        console.log(`   ${index + 1}. ID: ${extraction.id}`);
        console.log(`      Projet: ${extraction.projet_id}`);
        console.log(`      Statut: ${extraction.statut}`);
        console.log(`      Fichier: ${extraction.fichier}`);
        console.log(
          `      Date: ${new Date(extraction.date_extraction).toLocaleString(
            "fr-FR"
          )}`
        );
        console.log(`      Utilisateur: ${extraction.utilisateur_id}`);

        if (
          extraction.donnees_extraites &&
          extraction.donnees_extraites.localite
        ) {
          console.log(
            `      Localit√©: ${extraction.donnees_extraites.localite.type} - ${extraction.donnees_extraites.localite.valeur}`
          );
        }
        console.log("");
      });
    }

    // 3. Test avec filtres
    console.log("\nüîç 3. Tests avec filtres...");

    // Filtrer par projet
    console.log("\n   üìÅ Filtrage par projet (projet_id=22):");
    const projetFilterResponse = await axios.get(
      "http://localhost:3000/api/extractions?projet_id=22",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    console.log(
      `   ‚úÖ ${projetFilterResponse.data.length} extractions pour le projet 22`
    );

    // Filtrer par statut
    console.log("\n   üìä Filtrage par statut (statut=Extrait):");
    const statutFilterResponse = await axios.get(
      "http://localhost:3000/api/extractions?statut=Extrait",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    console.log(
      `   ‚úÖ ${statutFilterResponse.data.length} extractions avec le statut 'Extrait'`
    );

    // Filtrer par utilisateur
    console.log("\n   üë§ Filtrage par utilisateur (utilisateur_id=44):");
    const userFilterResponse = await axios.get(
      "http://localhost:3000/api/extractions?utilisateur_id=44",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    console.log(
      `   ‚úÖ ${userFilterResponse.data.length} extractions pour l'utilisateur 44`
    );

    // Combinaison de filtres
    console.log("\n   üéØ Filtrage combin√© (projet=22 + statut=Extrait):");
    const combinedFilterResponse = await axios.get(
      "http://localhost:3000/api/extractions?projet_id=22&statut=Extrait",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    console.log(
      `   ‚úÖ ${combinedFilterResponse.data.length} extractions (projet 22 + statut Extrait)`
    );
  } catch (error) {
    console.error("\n‚ùå Erreur:", {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data,
    });
  }
}

async function getExtractionDetails() {
  console.log("\nüîç D√âTAILS D'UNE EXTRACTION SP√âCIFIQUE");
  console.log("=".repeat(50));

  try {
    // Connexion
    const loginResponse = await axios.post("http://localhost:3000/api/login", {
      email: "reception.foncier@workflow.cm",
      mot_de_passe: "reception2025",
    });

    const token = loginResponse.data.access_token;

    // R√©cup√©rer la premi√®re extraction pour avoir un ID
    const allExtractionsResponse = await axios.get(
      "http://localhost:3000/api/extractions",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    if (allExtractionsResponse.data.length > 0) {
      const firstExtraction = allExtractionsResponse.data[0];
      console.log(`\nüìÑ D√©tails de l'extraction ID ${firstExtraction.id}:`);

      const detailResponse = await axios.get(
        `http://localhost:3000/api/extractions/${firstExtraction.id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      console.log(JSON.stringify(detailResponse.data, null, 2));
    } else {
      console.log("‚ÑπÔ∏è  Aucune extraction trouv√©e pour afficher les d√©tails");
    }
  } catch (error) {
    console.error("\n‚ùå Erreur:", {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data,
    });
  }
}

async function runExtractionsList() {
  await listExtractions();
  await getExtractionDetails();

  console.log("\n" + "=".repeat(50));
  console.log("üìö GUIDE D'UTILISATION DE L'API EXTRACTIONS:");
  console.log("");
  console.log("üîó Routes disponibles:");
  console.log(
    "  GET /api/extractions              - Liste toutes les extractions"
  );
  console.log("  GET /api/extractions?projet_id=X  - Filtre par projet");
  console.log("  GET /api/extractions?statut=X     - Filtre par statut");
  console.log(
    "  GET /api/extractions?utilisateur_id=X - Filtre par utilisateur"
  );
  console.log("  GET /api/extractions/:id          - D√©tails d'une extraction");
  console.log("");
  console.log("üìä Statuts possibles:");
  console.log("  - 'Extrait'      - Extraction termin√©e");
  console.log("  - 'En cours'     - En cours de traitement");
  console.log("  - 'Corrig√©'      - Corrig√©e manuellement");
  console.log("  - 'Valid√©'       - Valid√©e par un superviseur");
  console.log("  - 'Rejet√©'       - Rejet√©e");
  console.log("");
  console.log("üîê Autorisation:");
  console.log("  - Header: Authorization: Bearer {token}");
  console.log("  - Les utilisateurs de niveau 1-2 voient uniquement");
  console.log("    les extractions de leur localit√©");
  console.log("  - Les utilisateurs de niveau 3-4 voient tout");
}

if (require.main === module) {
  runExtractionsList();
}

module.exports = { listExtractions, getExtractionDetails };
