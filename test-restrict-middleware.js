const axios = require("axios");
const FormData = require("form-data");
const fs = require("fs");
const path = require("path");

/**
 * Test complet du middleware restrictToFirstUser
 *
 * Ce test v√©rifie que:
 * 1. L'authentification fonctionne
 * 2. Le middleware restrictToFirstUser autorise l'utilisateur correct
 * 3. Le parsing des FormData fonctionne
 * 4. L'upload r√©ussit avec le mock service
 */
async function testRestrictToFirstUserMiddleware() {
  console.log("üß™ Test du middleware restrictToFirstUser...\n");

  try {
    // 1. Test de connexion
    console.log("üîê 1. Test de connexion...");
    const loginResponse = await axios.post(
      "http://localhost:3000/api/auth/login",
      {
        nom_utilisateur: "claudine.belinga",
        mot_de_passe: "claudine123",
      }
    );

    const token = loginResponse.data.token;
    console.log("‚úÖ Connexion r√©ussie:", loginResponse.data.nom_complet);

    // 2. Cr√©ation du fichier de test
    console.log("\nüìÑ 2. Cr√©ation du fichier de test...");
    const testFilePath = path.join(__dirname, "test-middleware.pdf");
    fs.writeFileSync(
      testFilePath,
      "Contenu de test pour middleware restrictToFirstUser"
    );

    // 3. Test du middleware avec les bonnes donn√©es
    console.log("\nüîí 3. Test du middleware restrictToFirstUser...");

    const formData = new FormData();
    formData.append("file", fs.createReadStream(testFilePath));
    formData.append("projet_id", "22");
    formData.append(
      "localite",
      JSON.stringify({
        type: "arrondissement",
        valeur: "Soa",
      })
    );

    console.log("‚úÖ FormData pr√©par√©e:");
    console.log("   - file: test-middleware.pdf");
    console.log("   - projet_id: 22");
    console.log("   - localite: arrondissement Soa");

    // 4. Upload avec middleware
    console.log("\nüöÄ 4. Test upload avec middleware...");

    const uploadResponse = await axios.post(
      "http://localhost:3000/api/extraction/upload?projet_id=22",
      formData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          ...formData.getHeaders(),
        },
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
        timeout: 30000,
      }
    );

    console.log("‚úÖ SUCC√àS MIDDLEWARE:");
    console.log("Status:", uploadResponse.status);
    console.log("Response:", JSON.stringify(uploadResponse.data, null, 2));

    // 5. Test avec un utilisateur non autoris√© (si disponible)
    console.log("\nüö´ 5. Test avec utilisateur non autoris√©...");

    try {
      // Tenter avec un autre utilisateur si disponible
      const otherLoginResponse = await axios.post(
        "http://localhost:3000/api/auth/login",
        {
          nom_utilisateur: "autre.utilisateur", // Utilisateur qui n'est pas dans l'√©tape 1
          mot_de_passe: "password123",
        }
      );

      const otherToken = otherLoginResponse.data.token;

      const formData2 = new FormData();
      formData2.append("file", fs.createReadStream(testFilePath));
      formData2.append("projet_id", "22");
      formData2.append(
        "localite",
        JSON.stringify({
          type: "arrondissement",
          valeur: "Soa",
        })
      );

      const unauthorizedResponse = await axios.post(
        "http://localhost:3000/api/extraction/upload?projet_id=22",
        formData2,
        {
          headers: {
            Authorization: `Bearer ${otherToken}`,
            ...formData2.getHeaders(),
          },
          maxContentLength: Infinity,
          maxBodyLength: Infinity,
        }
      );

      console.log("‚ùå PROBL√àME: L'utilisateur non autoris√© a pu uploader!");
    } catch (error) {
      if (error.response?.status === 403) {
        console.log("‚úÖ Bon: Utilisateur non autoris√© rejet√© (403)");
      } else if (error.response?.status === 401) {
        console.log("‚ÑπÔ∏è  Note: Autre utilisateur non trouv√© (test limit√©)");
      } else {
        console.log("‚ö†Ô∏è  Erreur inattendue:", error.message);
      }
    }

    // 6. R√©sum√© du test
    console.log("\nüìä R√âSUM√â DU TEST:");
    console.log("‚úÖ Authentification: SUCC√àS");
    console.log("‚úÖ Middleware restrictToFirstUser: SUCC√àS");
    console.log("‚úÖ Parsing FormData: SUCC√àS");
    console.log("‚úÖ Upload avec mock Flask: SUCC√àS");
    console.log("\nüéâ TOUS LES TESTS R√âUSSIS!");
  } catch (error) {
    console.log("\n‚ùå ERREUR DANS LE TEST:");
    console.log("Status:", error.response?.status);
    console.log("Data:", error.response?.data);
    console.log("Message:", error.message);

    // Diagnostics
    if (error.response?.status === 403) {
      console.log("\nüîç DIAGNOSTIC:");
      console.log("- Le middleware restrictToFirstUser bloque l'acc√®s");
      console.log(
        "- V√©rifiez que l'utilisateur est bien assign√© √† l'√©tape 1 du projet 22"
      );
    } else if (error.response?.status === 400) {
      console.log("\nüîç DIAGNOSTIC:");
      console.log("- Probl√®me de parsing des donn√©es FormData");
      console.log("- V√©rifiez les champs file, projet_id, localite");
    }
  } finally {
    // Nettoyage
    console.log("\nüßπ Nettoyage...");
    try {
      fs.unlinkSync(path.join(__dirname, "test-middleware.pdf"));
    } catch (e) {
      // Ignore
    }
  }
}

if (require.main === module) {
  testRestrictToFirstUserMiddleware();
}

module.exports = { testRestrictToFirstUserMiddleware };
