const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function createCompleteWorkflow() {
  try {
    console.log("ÔøΩ Cr√©ation d'un workflow complet...\n");

    // 1. V√©rifier les localit√©s disponibles
    const localites = await prisma.localites.findMany({ take: 5 });
    console.log("üìç Localit√©s disponibles:");
    localites.forEach((l) => {
      console.log(`   ID: ${l.id} | Type: ${l.type} | Valeur: ${l.valeur}`);
    });

    // 2. Cr√©er un nouveau projet
    console.log("\nüìÅ 1. Cr√©ation du projet...");
    const newProject = await prisma.projets.create({
      data: {
        nom: "Projet Test Workflow G√©ographique",
        description:
          "Projet de d√©monstration pour workflow avec acc√®s g√©ographique restrictif",
        localite_id: localites[0]?.id || 1, // Utiliser la premi√®re localit√© disponible
      },
    });
    console.log(`‚úÖ Projet cr√©√©: ID ${newProject.id} - "${newProject.nom}"`);

    // 3. Cr√©er des √©tapes de workflow pour le projet
    console.log("\nÔøΩ 2. Cr√©ation des √©tapes workflow...");
    const etapes = [
      {
        projet_id: newProject.id,
        nom: "Validation G√©ographique",
        ordre: 1,
        description: "V√©rification des droits d'acc√®s g√©ographique",
        type_validation: "geographic_access",
      },
      {
        projet_id: newProject.id,
        nom: "R√©vision Technique",
        ordre: 2,
        description: "R√©vision technique des donn√©es par un expert",
        type_validation: "technical_review",
      },
      {
        projet_id: newProject.id,
        nom: "Approbation Finale",
        ordre: 3,
        description: "Approbation finale par le superviseur",
        type_validation: "final_approval",
      },
    ];

    const createdEtapes = [];
    for (let etapeData of etapes) {
      const etape = await prisma.etapes_workflow.create({ data: etapeData });
      createdEtapes.push(etape);
      console.log(
        `   ‚úÖ √âtape ${etape.ordre}: "${etape.nom}" (ID: ${etape.id})`
      );
    }

    // 4. Cr√©er des r√¥les sp√©cialis√©s pour le workflow
    console.log("\nüë• 3. Cr√©ation des r√¥les...");
    const roles = [
      {
        projet_id: newProject.id,
        nom: "workflow_validateur_geo",
        niveau_hierarchique: 1,
        description: "Validateur g√©ographique pour workflow",
      },
      {
        projet_id: newProject.id,
        nom: "workflow_technicien",
        niveau_hierarchique: 2,
        description: "Technicien expert pour r√©vision",
      },
      {
        projet_id: newProject.id,
        nom: "workflow_superviseur",
        niveau_hierarchique: 3,
        description: "Superviseur pour approbation finale",
      },
    ];

    const createdRoles = [];
    for (let roleData of roles) {
      const role = await prisma.roles.create({ data: roleData });
      createdRoles.push(role);
      console.log(
        `   ‚úÖ R√¥le: "${role.nom}" (ID: ${role.id}) - Niveau ${role.niveau_hierarchique}`
      );
    }

    // 5. Cr√©er des permissions pour les r√¥les
    console.log("\nÔøΩ 4. Cr√©ation des permissions...");
    const permissions = [
      { role_id: createdRoles[0].id, action: "validate_geographic_access" },
      { role_id: createdRoles[0].id, action: "read_local_data" },
      { role_id: createdRoles[1].id, action: "technical_review" },
      { role_id: createdRoles[1].id, action: "edit_technical_data" },
      { role_id: createdRoles[2].id, action: "final_approval" },
      { role_id: createdRoles[2].id, action: "manage_workflow" },
    ];

    for (let permData of permissions) {
      await prisma.permissions.create({ data: permData });
      const role = createdRoles.find((r) => r.id === permData.role_id);
      console.log(`   ‚úÖ Permission "${permData.action}" ‚Üí R√¥le: ${role.nom}`);
    }

    // 6. Cr√©er des utilisateurs pour le workflow
    console.log("\nüë§ 5. Cr√©ation des utilisateurs...");
    const users = [
      {
        nom: "Manga",
        prenom: "Jean-Claude",
        email: "validateur.geo.workflow@bpm.cm",
        mot_de_passe: "password123",
        niveau_hierarchique: 1,
        localite_id: localites[0]?.id || 1,
      },
      {
        nom: "Bella",
        prenom: "Marie-France",
        email: "technicien.workflow@bpm.cm",
        mot_de_passe: "password123",
        niveau_hierarchique: 2,
        localite_id: localites[1]?.id || 1,
      },
      {
        nom: "Talla",
        prenom: "Paul-Armand",
        email: "superviseur.workflow@bpm.cm",
        mot_de_passe: "password123",
        niveau_hierarchique: 3,
        localite_id: localites[2]?.id || 1,
      },
    ];

    const createdUsers = [];
    for (let userData of users) {
      const user = await prisma.utilisateurs.create({ data: userData });
      createdUsers.push(user);
      console.log(
        `   ‚úÖ Utilisateur: ${user.prenom} ${user.nom} (ID: ${user.id}) - ${user.email}`
      );
    }

    // 7. Assigner les r√¥les aux utilisateurs
    console.log("\nüîó 6. Attribution des r√¥les...");
    for (let i = 0; i < createdUsers.length && i < createdRoles.length; i++) {
      await prisma.utilisateur_roles.create({
        data: {
          utilisateur_id: createdUsers[i].id,
          role_id: createdRoles[i].id,
        },
      });
      console.log(
        `   ‚úÖ ${createdUsers[i].prenom} ${createdUsers[i].nom} ‚Üí R√¥le: ${createdRoles[i].nom}`
      );
    }

    // 8. Cr√©er des workflows en cours
    console.log("\nüîÑ 7. Cr√©ation des workflows actifs...");
    const workflowInstances = [
      {
        projet_id: newProject.id,
        etape_nom: createdEtapes[0].nom,
        ordre: 1,
        utilisateur_id: createdUsers[0].id,
      },
      {
        projet_id: newProject.id,
        etape_nom: createdEtapes[1].nom,
        ordre: 2,
        utilisateur_id: createdUsers[1].id,
      },
    ];

    const createdWorkflows = [];
    for (let workflowData of workflowInstances) {
      const workflow = await prisma.workflows.create({ data: workflowData });
      createdWorkflows.push(workflow);
      console.log(
        `   ‚úÖ Workflow: √âtape "${workflow.etape_nom}" assign√©e √† utilisateur ID ${workflow.utilisateur_id}`
      );
    }

    // AFFICHAGE FINAL DES IDENTIFIANTS
    console.log("\n" + "=".repeat(80));
    console.log("üéØ WORKFLOW COMPLET CR√â√â - TOUS LES IDENTIFIANTS");
    console.log("=".repeat(80));

    console.log("\nüìÅ PROJET:");
    console.log(`   üÜî ID: ${newProject.id}`);
    console.log(`   üìù Nom: ${newProject.nom}`);
    console.log(`   üìç Localit√© ID: ${newProject.localite_id}`);
    console.log(
      `   ÔøΩ Cr√©√©: ${
        newProject.date_creation
          ? newProject.date_creation.toISOString().split("T")[0]
          : "N/A"
      }`
    );

    console.log("\nüìã √âTAPES WORKFLOW:");
    createdEtapes.forEach((etape) => {
      console.log(
        `   üÜî ID: ${etape.id} | Ordre: ${etape.ordre} | Nom: "${etape.nom}"`
      );
      console.log(`      üìÑ Description: ${etape.description}`);
      console.log(`      üîß Type: ${etape.type_validation}`);
    });

    console.log("\nüë• R√îLES:");
    createdRoles.forEach((role) => {
      console.log(
        `   üÜî ID: ${role.id} | Nom: "${role.nom}" | Niveau: ${role.niveau_hierarchique}`
      );
      console.log(`      üìÑ Description: ${role.description}`);
    });

    console.log("\nüë§ UTILISATEURS:");
    createdUsers.forEach((user, index) => {
      const role = createdRoles[index];
      console.log(`   üÜî ID: ${user.id} | Email: ${user.email}`);
      console.log(
        `      üë§ Nom: ${user.prenom} ${user.nom} | Niveau: ${user.niveau_hierarchique}`
      );
      console.log(
        `      üìç Localit√© ID: ${user.localite_id} | R√¥le: ${
          role?.nom || "N/A"
        }`
      );
    });

    console.log("\nüîÑ INSTANCES WORKFLOW ACTIVES:");
    createdWorkflows.forEach((wf) => {
      const user = createdUsers.find((u) => u.id === wf.utilisateur_id);
      console.log(
        `   üÜî ID: ${wf.id} | √âtape: "${wf.etape_nom}" | Ordre: ${wf.ordre}`
      );
      console.log(
        `      üë§ Assign√© √†: ${user?.prenom} ${user?.nom} (ID: ${wf.utilisateur_id})`
      );
    });

    console.log("\n‚úÖ WORKFLOW COMPLET CR√â√â AVEC SUCC√àS!");
    console.log("\nüéØ IDENTIFIANTS PRINCIPAUX √Ä RETENIR:");
    console.log(`üìÅ Projet ID: ${newProject.id}`);
    console.log(
      `üë§ Utilisateurs ID: [${createdUsers.map((u) => u.id).join(", ")}]`
    );
    console.log(`üë• R√¥les ID: [${createdRoles.map((r) => r.id).join(", ")}]`);
    console.log(`üìã √âtapes ID: [${createdEtapes.map((e) => e.id).join(", ")}]`);
    console.log(
      `üîÑ Workflows ID: [${createdWorkflows.map((w) => w.id).join(", ")}]`
    );
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation:", error.message);
    console.error("Stack:", error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

createCompleteWorkflow();
