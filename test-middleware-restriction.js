const FormData = require('form-data');
const fs = require('fs');
const axios = require('axios');

async function testRestrictToFirstUserMiddleware() {
  try {
    console.log('üß™ Test du middleware restrictToFirstUser...\n');

    // 1. Se connecter avec l'utilisateur de l'√©tape 1
    console.log('üîê 1. Connexion utilisateur √©tape 1...');
    const loginResponse = await axios.post('http://localhost:3000/api/login', {
      email: 'reception.foncier@workflow.cm',
      mot_de_passe: 'reception2025'
    });

    const token1 = loginResponse.data.access_token;
    const user1 = loginResponse.data.user;
    console.log(`‚úÖ Connect√©: ${user1.prenom} ${user1.nom} (Niveau ${user1.niveau_hierarchique})`);

    // 2. Se connecter avec l'utilisateur de l'√©tape 2 (devrait √™tre refus√©)
    console.log('\nüîê 2. Connexion utilisateur √©tape 2...');
    const loginResponse2 = await axios.post('http://localhost:3000/api/login', {
      email: 'technicien.workflow@bpm.cm',
      mot_de_passe: 'password123'
    });

    const token2 = loginResponse2.data.access_token;
    const user2 = loginResponse2.data.user;
    console.log(`‚úÖ Connect√©: ${user2.prenom} ${user2.nom} (Niveau ${user2.niveau_hierarchique})`);

    // 3. Cr√©er un fichier de test
    console.log('\nüìÑ 3. Cr√©ation fichier de test...');
    const testImageContent = Buffer.from(
      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==',
      'base64'
    );
    const testFilePath = './test-middleware.png';
    fs.writeFileSync(testFilePath, testImageContent);
    console.log('‚úÖ Fichier cr√©√©');

    // 4. Pr√©parer FormData
    const createFormData = (projetId) => {
      const formData = new FormData();
      formData.append('file', fs.createReadStream(testFilePath), {
        filename: 'test-middleware.png',
        contentType: 'image/png'
      });
      formData.append('projet_id', projetId);
      formData.append('localite', JSON.stringify({
        type: 'arrondissement',
        valeur: 'Soa'
      }));
      return formData;
    };

    // 5. Test avec utilisateur √©tape 1 (devrait r√©ussir)
    console.log('\n‚úÖ 4. Test upload avec utilisateur √©tape 1...');
    try {
      const formData1 = createFormData(user1.projet_id || '22');
      const response1 = await axios.post(
        `http://localhost:3000/api/extraction/upload?projet_id=${user1.projet_id || '22'}`,
        formData1,
        {
          headers: {
            'Authorization': `Bearer ${token1}`,
            ...formData1.getHeaders()
          }
        }
      );
      console.log(`‚úÖ SUCCESS - Utilisateur √©tape 1 autoris√© (HTTP ${response1.status})`);
      console.log(`   Extraction cr√©√©e: ID ${response1.data.id}`);
    } catch (error) {
      console.log(`‚ùå √âCHEC - Utilisateur √©tape 1 refus√©: ${error.response?.status} - ${error.response?.data?.error}`);
    }

    // 6. Test avec utilisateur √©tape 2 (devrait √©chouer)
    console.log('\n‚ùå 5. Test upload avec utilisateur √©tape 2...');
    try {
      const formData2 = createFormData(user2.projet_id || '22');
      const response2 = await axios.post(
        `http://localhost:3000/api/extraction/upload?projet_id=${user2.projet_id || '22'}`,
        formData2,
        {
          headers: {
            'Authorization': `Bearer ${token2}`,
            ...formData2.getHeaders()
          }
        }
      );
      console.log(`‚ùå PROBL√àME - Utilisateur √©tape 2 autoris√© alors qu'il devrait √™tre refus√© (HTTP ${response2.status})`);
    } catch (error) {
      if (error.response?.status === 403) {
        console.log(`‚úÖ SUCCESS - Utilisateur √©tape 2 correctement refus√© (HTTP 403)`);
        console.log(`   Message: ${error.response.data.error}`);
      } else {
        console.log(`‚ö†Ô∏è  INATTENDU - √âchec pour une autre raison: ${error.response?.status} - ${error.response?.data?.error || error.message}`);
      }
    }

    // 7. Test avec header X-Projet-Id au lieu de param√®tre URL
    console.log('\nüîß 6. Test avec header X-Projet-Id...');
    try {
      const formData3 = createFormData(user1.projet_id || '22');
      const response3 = await axios.post(
        'http://localhost:3000/api/extraction/upload',
        formData3,
        {
          headers: {
            'Authorization': `Bearer ${token1}`,
            'X-Projet-Id': (user1.projet_id || '22').toString(),
            ...formData3.getHeaders()
          }
        }
      );
      console.log(`‚úÖ SUCCESS - Header X-Projet-Id fonctionne (HTTP ${response3.status})`);
    } catch (error) {
      console.log(`‚ùå √âCHEC - Header X-Projet-Id ne fonctionne pas: ${error.response?.status} - ${error.response?.data?.error}`);
    }

    // 8. Test sans projet_id (devrait laisser passer ou √©chouer proprement)
    console.log('\nüîß 7. Test sans projet_id...');
    try {
      const formData4 = createFormData(user1.projet_id || '22');
      const response4 = await axios.post(
        'http://localhost:3000/api/extraction/upload', // Pas de projet_id dans URL
        formData4,
        {
          headers: {
            'Authorization': `Bearer ${token1}`,
            // Pas de X-Projet-Id
            ...formData4.getHeaders()
          }
        }
      );
      console.log(`‚ö†Ô∏è  INATTENDU - R√©ussi sans projet_id accessible (HTTP ${response4.status})`);
    } catch (error) {
      console.log(`‚úÖ ATTENDU - √âchec sans projet_id: ${error.response?.status} - ${error.response?.data?.error}`);
    }

    // 9. Nettoyage
    console.log('\nüßπ 8. Nettoyage...');
    fs.unlinkSync(testFilePath);
    console.log('‚úÖ Fichier de test supprim√©');

    console.log('\nüéâ Tests du middleware termin√©s !');

  } catch (error) {
    console.error('\nüí• Erreur lors des tests:', error.message);
    if (error.response) {
      console.error(`Status: ${error.response.status}`);
      console.error(`Data:`, error.response.data);
    }

    // Nettoyage en cas d'erreur
    try {
      if (fs.existsSync('./test-middleware.png')) {
        fs.unlinkSync('./test-middleware.png');
        console.log('‚úÖ Fichier de test nettoy√©');
      }
    } catch (cleanupError) {
      console.error('Erreur lors du nettoyage:', cleanupError.message);
    }
  }
}

// Ex√©cuter le test
testRestrictToFirstUserMiddleware();
