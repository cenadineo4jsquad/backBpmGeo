// Test pour v√©rifier la cr√©ation automatique de titre foncier au niveau 2
const axios = require("axios");

const API_BASE = "http://localhost:3000";

async function testWorkflowTitreNiveau2() {
  console.log("üß™ Test: Cr√©ation automatique de titre foncier au niveau 2");
  console.log("=".repeat(60));

  try {
    // 1. Connexion utilisateur niveau 1 (R√©ceptionnaire Foncier)
    console.log(
      "\n1Ô∏è‚É£ Connexion utilisateur niveau 1 (R√©ceptionnaire Foncier)..."
    );
    const loginResponse = await axios.post(`${API_BASE}/api/login`, {
      email: "reception.foncier@workflow.cm",
      mot_de_passe: "reception2025",
    });

    const token = loginResponse.data.access_token;
    const headers = { Authorization: `Bearer ${token}` };

    console.log("‚úÖ Connexion r√©ussie pour R√©ceptionnaire Foncier");

    // 2. Cr√©er une extraction avec donn√©es g√©ographiques (Projet ID 22)
    console.log("\n2Ô∏è‚É£ Cr√©ation d'une extraction avec donn√©es g√©ographiques...");
    const extractionData = {
      nom_fichier: "test-titre-niveau2.",
      donnees_extraites: {
        proprietaire: "Jean Martin Dupont",
        superficie: 5000,
        perimetre: 300,
        coordonnees_gps: [
          [11.5167, 3.8667],
          [11.52, 3.87],
          [11.515, 3.875],
          [11.512, 3.868],
          [11.5167, 3.8667],
        ],
        localite: {
          type: "commune",
          valeur: "Yaound√© 3√®me",
        },
        surface_m2: 5000,
        type_titre: "Titre foncier",
      },
      projet_id: 22,
      status: "en_attente_validation",
      niveau_validation: 1,
    };

    const extractionResponse = await axios.post(
      `${API_BASE}/api/extractions`,
      extractionData,
      { headers }
    );
    const extractionId = extractionResponse.data.id;
    console.log("‚úÖ Extraction cr√©√©e avec ID:", extractionId);

    // 3. V√©rifier qu'aucun titre foncier n'existe encore
    console.log("\n3Ô∏è‚É£ V√©rification: aucun titre foncier avant soumission...");
    const titresAvant = await axios.get(`${API_BASE}/titres-fonciers`, {
      headers,
    });
    const titresAvantCount = titresAvant.data.length;
    console.log("üìä Nombre de titres fonciers avant:", titresAvantCount);

    // 4. Soumettre l'extraction au niveau suivant (niveau 2)
    console.log("\n4Ô∏è‚É£ Soumission de l'extraction au niveau 2...");
    const submitResponse = await axios.post(
      `${API_BASE}/extractions/${extractionId}/submit`,
      {},
      { headers }
    );

    console.log("‚úÖ Soumission r√©ussie:", submitResponse.data.message);

    // 5. V√©rifier que l'extraction est maintenant au niveau 2
    console.log("\n5Ô∏è‚É£ V√©rification du niveau de validation...");
    const extractionApres = await axios.get(
      `${API_BASE}/extractions/${extractionId}`,
      { headers }
    );
    console.log(
      "üìä Niveau validation apr√®s soumission:",
      extractionApres.data.niveau_validation
    );

    // 6. V√©rifier qu'un titre foncier a √©t√© cr√©√© automatiquement
    console.log(
      "\n6Ô∏è‚É£ V√©rification de la cr√©ation automatique du titre foncier..."
    );
    const titresApres = await axios.get(`${API_BASE}/titres-fonciers`, {
      headers,
    });
    const titresApresCount = titresApres.data.length;

    console.log("üìä Nombre de titres fonciers apr√®s:", titresApresCount);

    if (titresApresCount > titresAvantCount) {
      console.log("üéâ SUCCESS: Titre foncier cr√©√© automatiquement !");

      // Trouver le nouveau titre foncier
      const nouveauTitre = titresApres.data[titresApres.data.length - 1];
      console.log("üìã D√©tails du nouveau titre foncier:");
      console.log("   - ID:", nouveauTitre.id);
      console.log("   - Propri√©taire:", nouveauTitre.proprietaire);
      console.log("   - Superficie:", nouveauTitre.superficie, "m¬≤");
      console.log("   - P√©rim√®tre:", nouveauTitre.perimetre, "m");
      console.log("   - Localit√©:", nouveauTitre.localite);

      // V√©rifier la liaison extraction-titre
      console.log("\n7Ô∏è‚É£ V√©rification de la liaison extraction-titre...");
      try {
        const liaisonResponse = await axios.get(
          `${API_BASE}/titres-extractions`,
          { headers }
        );
        const liaisons = liaisonResponse.data;
        const liaisonTrouvee = liaisons.find(
          (l) =>
            l.extraction_id === extractionId && l.titre_id === nouveauTitre.id
        );

        if (liaisonTrouvee) {
          console.log("‚úÖ Liaison extraction-titre cr√©√©e correctement");
        } else {
          console.log("‚ùå Liaison extraction-titre non trouv√©e");
        }
      } catch (error) {
        console.log(
          "‚ö†Ô∏è Impossible de v√©rifier les liaisons (route peut-√™tre non disponible)"
        );
      }
    } else {
      console.log("‚ùå ERREUR: Aucun titre foncier cr√©√© automatiquement");
    }

    console.log("\n" + "=".repeat(60));
    console.log("üèÅ Test termin√©");
  } catch (error) {
    console.error("‚ùå Erreur durant le test:");
    console.error("Message:", error.message);
    if (error.response) {
      console.error("Status:", error.response.status);
      console.error("Data:", error.response.data);
    }
  }
}

// Ex√©cuter le test
testWorkflowTitreNiveau2();
